{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37e4bf10-9a55-4b58-a992-7d7a38b52a7e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in /opt/anaconda3/lib/python3.11/site-packages (1.35.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<25,>=16.8 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (23.1)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (2.1.4)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (10.2.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (3.20.3)\n",
      "Requirement already satisfied: pyarrow>=7.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (14.0.2)\n",
      "Requirement already satisfied: requests<3,>=2.27 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (2.31.0)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (13.3.5)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (4.9.0)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (3.1.37)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in /opt/anaconda3/lib/python3.11/site-packages (from streamlit) (6.3.3)\n",
      "Requirement already satisfied: jinja2 in /opt/anaconda3/lib/python3.11/site-packages (from altair<6,>=4.0->streamlit) (3.1.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in /opt/anaconda3/lib/python3.11/site-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
      "Requirement already satisfied: toolz in /opt/anaconda3/lib/python3.11/site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in /opt/anaconda3/lib/python3.11/site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/anaconda3/lib/python3.11/site-packages (from pandas<3,>=1.3.0->streamlit) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/anaconda3/lib/python3.11/site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in /opt/anaconda3/lib/python3.11/site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.27->streamlit) (2.0.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.27->streamlit) (2024.6.2)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in /opt/anaconda3/lib/python3.11/site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/anaconda3/lib/python3.11/site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in /opt/anaconda3/lib/python3.11/site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/anaconda3/lib/python3.11/site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in /opt/anaconda3/lib/python3.11/site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/anaconda3/lib/python3.11/site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in /opt/anaconda3/lib/python3.11/site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/anaconda3/lib/python3.11/site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/anaconda3/lib/python3.11/site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n",
      "Requirement already satisfied: six>=1.5 in /opt/anaconda3/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.3.0->streamlit) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b58c4de-074a-47bf-864c-78a12184969a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "import plotly.express as px\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('/Users/teresagodinho/Desktop/loan/loan_balanced_6040.csv')\n",
    "\n",
    "# Data preprocessing\n",
    "X = data[['annual_inc', 'term', 'loan_amnt', 'home_ownership_OWN']]\n",
    "y = data['loan_status']\n",
    "\n",
    "# Apply SMOTE to balance the dataset\n",
    "smote = SMOTE(random_state=42)\n",
    "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)\n",
    "\n",
    "# Define the Random Forest Classifier with GridSearchCV\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_features': ['sqrt', 'log2'],\n",
    "    'max_depth': [4, 6, 8, 10],\n",
    "    'criterion': ['gini', 'entropy']\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=5)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Best model from GridSearchCV\n",
    "model = grid_search.best_estimator_\n",
    "\n",
    "# Prepare data for linear regression to predict interest rates\n",
    "X_interest = data[['loan_amnt', 'open_acc', 'delinq_2yrs', 'term']]\n",
    "y_interest = data['int_rate']\n",
    "\n",
    "# Train a Linear Regression model for predicting interest rates\n",
    "lin_reg_model = LinearRegression()\n",
    "lin_reg_model.fit(X_interest, y_interest)\n",
    "\n",
    "# Standardize data for clustering\n",
    "scaler = StandardScaler()\n",
    "data_scaled = scaler.fit_transform(data[['annual_inc', 'loan_amnt']])\n",
    "\n",
    "# Apply KMeans clustering\n",
    "kmeans = KMeans(n_clusters=4, random_state=42, n_init=10)\n",
    "data['cluster'] = kmeans.fit_predict(data_scaled)\n",
    "\n",
    "# Compute default probabilities for each client using the Random Forest Classifier\n",
    "data['probability_of_default'] = model.predict_proba(data[['annual_inc', 'term', 'loan_amnt', 'home_ownership_OWN']])[:, 1]\n",
    "data.sort_values(by='probability_of_default', ascending=False, inplace=True)\n",
    "\n",
    "# Streamlit app\n",
    "st.title(\"LendSmart Dashboard\")\n",
    "\n",
    "st.sidebar.title(\"Navigation\")\n",
    "page = st.sidebar.selectbox(\"Select a page:\", [\"Main Page\", \"Background Information\", \"New Client Default Prediction\", \"Client Risk Segmentation\"])\n",
    "\n",
    "if page == \"Main Page\":\n",
    "    st.markdown(\n",
    "        \"\"\"\n",
    "        This dashboard helps a US loan mortgage company identify and manage at-risk clients. Using machine learning models and statistical analysis, it predicts loan defaults and provides actionable insights. Amid rising US mortgage delinquency rates due to economic uncertainty (Financial Times), this tool enables early identification of potential defaults and better management of at-risk clients, ensuring financial stability and improved loan portfolio management.\n",
    "        \"\"\"\n",
    "    )\n",
    "\n",
    "elif page == \"Background Information\":\n",
    "    st.markdown(\n",
    "        \"\"\"\n",
    "        Explore various graphs that describe our dataset, which underpins the predictive tools used in the following tabs. Gain insights into loan distributions, income levels, interest rates, and more.\n",
    "        \"\"\"\n",
    "    )\n",
    "    \n",
    "    chart_type = st.selectbox(\"Select a chart type:\", [\"Correlation Heatmap\", \"Distribution of Loan Status\", \"Distribution of Loan Amounts\", \"Distribution of Annual Incomes\", \"Distribution of Interest Rates\"])\n",
    "    \n",
    "    if chart_type == \"Correlation Heatmap\":\n",
    "        correlation_matrix = data[['loan_amnt', 'term', 'int_rate', 'installment', 'annual_inc', \n",
    "                                   'delinq_2yrs', 'home_ownership_OWN', 'home_ownership_RENT', 'open_acc', 'loan_status']].corr()\n",
    "        fig = px.imshow(correlation_matrix, \n",
    "                        labels={'color':'Correlation'},\n",
    "                        x=['Loan Amount', 'Loan Term', 'Interest Rate', 'Installment', 'Annual Income', \n",
    "                           'Delinquency in the Last 2 Years', 'Home Owner', 'Home Renter', 'Number of Open Accounts', 'Loan Status'],\n",
    "                        y=['Loan Amount', 'Loan Term', 'Interest Rate', 'Installment', 'Annual Income', \n",
    "                           'Delinquency in the Last 2 Years', 'Home Owner', 'Home Renter', 'Number of Open Accounts', 'Loan Status'],\n",
    "                        color_continuous_scale='RdBu_r')\n",
    "        fig.update_layout(title='Correlation Heatmap')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    elif chart_type == \"Distribution of Loan Status\":\n",
    "        loan_status_counts = data['loan_status'].value_counts().reset_index()\n",
    "        loan_status_counts.columns = ['Loan Status', 'Count']\n",
    "        fig = px.bar(loan_status_counts, \n",
    "                     x='Loan Status', \n",
    "                     y='Count',\n",
    "                     labels={'Loan Status': 'Loan Status', 'Count': 'Number of Loans'},\n",
    "                     title='Distribution of Loan Status')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    elif chart_type == \"Distribution of Loan Amounts\":\n",
    "        fig = px.histogram(data, x='loan_amnt', nbins=50, title='Distribution of Loan Amounts')\n",
    "        fig.update_layout(xaxis_title='Loan Amount ($)', yaxis_title='Count')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    elif chart_type == \"Distribution of Annual Incomes\":\n",
    "        fig = px.histogram(data, x='annual_inc', nbins=50, title='Distribution of Annual Incomes')\n",
    "        fig.update_layout(xaxis_title='Annual Income ($)', yaxis_title='Count')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    elif chart_type == \"Distribution of Interest Rates\":\n",
    "        fig = px.histogram(data, x='int_rate', nbins=50, title='Distribution of Interest Rates')\n",
    "        fig.update_layout(xaxis_title='Interest Rate (%)', yaxis_title='Count')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "elif page == \"New Client Default Prediction\":\n",
    "    st.markdown(\n",
    "        \"\"\"\n",
    "        Enter your information to receive a personalized loan recommendation in seconds. Our tool quickly evaluates your eligibility, helping you save time and determine the feasibility of your loan application. If your loan is denied, you will receive a recommendation. If your loan is approved, we will suggest an interest rate.\n",
    "        \"\"\"\n",
    "    )\n",
    "\n",
    "    annual_income = st.number_input('Annual Income', min_value=0, max_value=1000000, value=120000)\n",
    "    loan_term = st.number_input('Loan Term (months)', min_value=1, max_value=360, value=36)\n",
    "    loan_amount = st.number_input('Loan Amount', min_value=0, max_value=1000000, value=300000)\n",
    "    home_ownership = st.number_input('Home Ownership (OWN=1, RENT=0)', min_value=0, max_value=1, value=1)\n",
    "    open_acc = st.number_input('Number of Open Accounts', min_value=0, max_value=50, value=5)\n",
    "    delinq_2yrs = st.number_input('Delinquencies in Last 2 Years (1=YES, 0=NO)', min_value=0, max_value=50, value=0)\n",
    "\n",
    "    if st.button('Predict'):\n",
    "        input_data = pd.DataFrame({\n",
    "            'annual_inc': [annual_income],\n",
    "            'term': [loan_term],\n",
    "            'loan_amnt': [loan_amount],\n",
    "            'home_ownership_OWN': [home_ownership]\n",
    "        })\n",
    "\n",
    "        prediction = model.predict(input_data)\n",
    "        prediction_proba = model.predict_proba(input_data)\n",
    "\n",
    "        if prediction[0] == 1:\n",
    "            st.write('Loan Denied')\n",
    "            st.write(f\"{prediction_proba[0][1]*100:.2f}% probability of default\")\n",
    "            st.write('Recommendations:')\n",
    "            st.write(\"\"\"\n",
    "            - Reduce Loan Amount: A lower loan amount reduces the repayment burden, which can decrease the risk of default.\n",
    "            - Extend Loan Term: Smaller monthly payments can be easier to manage, reducing the risk of default.\n",
    "            \"\"\")\n",
    "        else:\n",
    "            st.write('Loan Accepted')\n",
    "            st.write(f\"{prediction_proba[0][1]*100:.2f}% probability of default\")\n",
    "\n",
    "            input_data_for_rate = pd.DataFrame({\n",
    "                'loan_amnt': [loan_amount],\n",
    "                'open_acc': [open_acc],\n",
    "                'delinq_2yrs': [delinq_2yrs],\n",
    "                'term': [loan_term]\n",
    "            })\n",
    "\n",
    "            predicted_rate = lin_reg_model.predict(input_data_for_rate)\n",
    "            st.write(f\"The suggested interest rate is {predicted_rate[0]:.2f}%.\")\n",
    "\n",
    "elif page == \"Client Risk Segmentation\":\n",
    "    risk_levels = data.pivot_table(values='loan_status', \n",
    "                                   index=pd.cut(data['loan_amnt'], bins=range(0, 105000, 5000)), \n",
    "                                   columns=pd.cut(data['annual_inc'], bins=range(0, 1050000, 50000)), \n",
    "                                   aggfunc='mean')\n",
    "    risk_levels = risk_levels.fillna(0)\n",
    "\n",
    "    x_labels = [f\"${i*5000}\" for i in range(21)]\n",
    "    y_labels = [f\"${i*50000}\" for i in range(21)]\n",
    "\n",
    "    heatmap = px.imshow(\n",
    "        risk_levels.values,\n",
    "        labels=dict(x=\"Loan Amount\", y=\"Annual Income\", color=\"Default Probability\"),\n",
    "        x=x_labels[:risk_levels.shape[1]],\n",
    "        y=y_labels[:risk_levels.shape[0]],\n",
    "        color_continuous_scale='RdYlGn_r',\n",
    "    )\n",
    "\n",
    "    heatmap.update_layout(\n",
    "        title='Client Risk Segmentation Heatmap',\n",
    "        xaxis_title='Loan Amount',\n",
    "        yaxis_title='Annual Income',\n",
    "        autosize=False,\n",
    "        width=800,\n",
    "        height=800\n",
    "    )\n",
    "    \n",
    "    st.plotly_chart(heatmap)\n",
    "\n",
    "    st.markdown(\n",
    "        \"\"\"\n",
    "        This heatmap visualizes the risk segmentation of clients based on their loan amounts and annual incomes. Each cell represents the default probability for a specific segment, with colors ranging from green (low risk) to red (high risk). By analyzing this heatmap, we can identify which client segments are more likely to default on their loans, allowing for better risk management and targeted strategies.\n",
    "        \"\"\"\n",
    "    )\n",
    "    \n",
    "    data['suggested_interest_rate'] = lin_reg_model.predict(data[['loan_amnt', 'open_acc', 'delinq_2yrs', 'term']]).round(2)\n",
    "    data_table = data[['annual_inc', 'term', 'loan_amnt', 'home_ownership_OWN', 'delinq_2yrs', 'probability_of_default', 'int_rate', 'suggested_interest_rate']]\n",
    "    data_table = data_table.rename(columns={'annual_inc': 'Annual Income', 'term': 'Loan Term', 'loan_amnt': 'Loan Amount', 'home_ownership_OWN': 'Home Ownership', 'delinq_2yrs': 'Delinquencies in Last 2 Years', 'probability_of_default': 'Probability of Default', 'int_rate': 'Current Interest Rate', 'suggested_interest_rate': 'Suggested Interest Rate'})\n",
    "\n",
    "    st.dataframe(data_table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fede3283-749d-42ac-ae22-9d1c3b0b0bc7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
